@page "/fetchdata"
@using BlazorWithMediator.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (Forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th style="width: 15%;">Date</th>
                <th style="width: 15%;">Temp. (C)</th>
                <th style="width: 15%;">Temp. (F)</th>
                <th>Summary</th>
                <th style="width: 1%;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in Forecasts)
            {
                <FetchDataRow Forecast="forecast" OnRequestUpdate="Update" OnRequestDelete="Delete" />
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="() => CreateModal?.Open()">Add Forecast</button>
}

<CreateForecastModal @ref="CreateModal" OnSubmit="Create" />


@code {

    private CreateForecastModal? CreateModal;
    private List<WeatherForecastDto>? Forecasts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Forecasts = await Http.GetFromJsonAsync<List<WeatherForecastDto>>("WeatherForecast");
    }

    private async Task Create(CreateForecastRequest request)
    {
        var response = await Http.PostAsJsonAsync("WeatherForecast", request);
        response.EnsureSuccessStatusCode();

        var newForecast = await response.Content.ReadFromJsonAsync<WeatherForecastDto>();
        Forecasts!.Add(newForecast!);

        CreateModal!.Close();
    }

    private async Task Update(UpdateForecastRequest request)
    {
        var response = await Http.PutAsJsonAsync($"WeatherForecast/{request.Id}", request);
        response.EnsureSuccessStatusCode();

        var updatedForecast = await response.Content.ReadFromJsonAsync<WeatherForecastDto>();

        var index = Forecasts!.IndexOf(Forecasts!.First(x => x.Id == request.Id));
        Forecasts[index] = updatedForecast!;
    }

    private async Task Delete(int id)
    {
        var response = await Http.DeleteAsync($"WeatherForecast/{id}"); 
        response.EnsureSuccessStatusCode();

        Forecasts!.RemoveAll(x => x.Id == id);
    }
}
